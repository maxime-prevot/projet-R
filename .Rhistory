getwd()
# Chargement des donnees
projet <- read.csv("Data Produit.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
# Chargement des donnees
projet <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
projet <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
projet <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
projet <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
str(projet)
projet[projet$Response=="Oui", ]
projet[projet$RESPONSE=="Oui", ]
#Selection des lignes où reponse = oui
projet[projet$RESPONSE=="Oui", ]
#Selection des lignes où reponse = oui
projet[projet$RESPONSE=="Oui", ]
table(projet$RESPONSE)
table(projet$RESPONSE)
table(projet$RESPONSE)
table(projet$RESPONSE)
pie(table(projet$RESPONSE), main = "R�partition des classes")
qplot(RESPONSE, data=produit)
pie(table(projet$RESPONSE), main = "R�partition des classes")
pie(table(projet$RESPONSE), main = "R�partition des classes")
require("ggplot2")
qplot(RESPONSE, data=produit)
qplot(RESPONSE, data=projet)
qplot(RESPONSE, data=projet, color=RESPONSE)
qplot(RESPONSE, data=projet, fill=RESPONSE)
qplot(RESPONSE, data=projet, fill=RESPONSE)
qplot(AGE, data=projet, fill=RESPONSE)
qplot(AGE, data=projet, fill=AGE)
qplot(INCOME, data=projet, fill=INCOME)
qplot(INCOME, data=projet, fill=INCOME,bins=5)
qplot(RESPONSE, data=projet, fill=RESPONSE)
qplot(INCOME, data=projet, fill=INCOME,bins=5)
qplot(INCOME, data=projet, fill=INCOME,bins=5)
qplot(AGE, data=projet, fill=AGE,bins=5)
qplot(INCOME, data=projet, fill=RESPONSE,bins=5)
qplot(INCOME, data=projet, fill=RESPONSE,bins=5)
qplot(INCOME, data=projet, fill=RESPONSE,bins=5)
qplot(AGE, data=projet, fill=RESPONSE,bins=5)
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et d'Age", xlab="Valeur de Age",
ylab="Valeur de Revenus")
qplot(Age, Revenus, data=produit, main="Nuage de point de Revenus et Age", xlab="Valeur de Age",
ylab="Valeur de Revenus", color=RESPONSE)
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et d'Age", xlab="Valeur de Age",
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et d'Age", xlab="Valeur de Age",
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et d'Age", xlab="Valeur de Age",
ylab="Valeur de Revenus", color=RESPONSE)
qplot(AGE, data=projet, fill=RESPONSE,bins=5)
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et d'Age", xlab="Valeur de Age",
boxplot(projet$AGE, data=projet)
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et d'Age", xlab="Valeur de Age",
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et Age", xlab="Valeur de Age",
ylab="Valeur de Revenus")
qplot(AGE, INCOME, data=projet, main="Nuage de point de Revenus et Age", xlab="Valeur de Age",
ylab="Valeur de Revenus", color=RESPONSE)
install.packages("rpart")
install.packages("C50")
install.packages("tree")
library(rpart)
library(C50)
library(tree)
tree1 <- rpart(RESPONSE~., projet)
plot(tree1)
tree1 <- rpart(RESPONSE~., projet)
plot(tree1)
tree2 <- C5.0(RESPONSE~., projet)
plot(tree2, type="simple")
tree3 <- tree(RESPONSE~., data=projet)
plot(tree3)
View(tree1)
plot(tree1)
View(tree1)
tree1 <- rpart(RESPONSE~., projet)
plot(tree1)
tree1 <- rpart(RESPONSE~., projet)
library(rpart)
tree1 <- rpart(RESPONSE~., projet)
plot(tree1)
tree1 <- rpart(RESPONSE~., data=projet)
plot(tree1)
tree1 <- rpart(RESPONSE~., data=projet, control = rpart.control("minsplit" = 1))
plot(tree1)
tree1 <- rpart(RESPONSE~.,method="class", data=projet)
plot(tree1)
projet <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
require("ggplot2")
library(arules)
projetResponse <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.02, conf = 0.3, target ="rules", minlen=2))
df_rules2 <- DATAFRAME(rules2)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxtime=20))
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
df_rules2 <- DATAFRAME(rules2)
View(df_rules2)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.02, conf = 0.3, target ="rules", minlen=2, maxlen=20, maxtime=20))
df_rules2 <- DATAFRAME(rules2)
df_rules2 <- df_rules2[df_rules2$lift>1,]
df_rules2 <- df_rules2[df_rules2$lift>1,]
df_rules2[df_rules2$RHS=="{RESPONSE=Oui}",]
df_rules2[df_rules2$RHS=="{RESPONSE=Non}",]
df_rules2[df_rules2$LHS=="{RESPONSE=Oui}",]
df_rules2[df_rules2$RHS=="{RESPONSE=Oui}",]
df_rules2 <- DATAFRAME(rules2)
df_rules2[df_rules2$RHS=="{RESPONSE=Oui}",]
projetResponse <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".")
rules2 <- apriori(projetResponse, parameter = list(supp = 0.02, conf = 0.3, target ="rules", minlen=2, maxlen=20, maxtime=20))
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
projetResponse$AGE <- as.character(projetResponse$AGE)
View(projetResponse)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.02, conf = 0.3, target ="rules", minlen=2, maxlen=20, maxtime=20))
projetResponse <- read.csv("Data Projet.csv", header = TRUE, sep = ",", dec = ".", stringsAsFactors = T)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
projetResponse$AGE <- as.character(projetResponse$AGE)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
projetResponse.AGE <- as.character(projetResponse.AGE)
X[, projetResponse$AGE] <- sapply(X[, projetResponse$AGE], as.character)
projetResponse[, AGE] <- sapply(X[, AGE], as.character)
projetResponse[, AGE] <- sapply(projetResponse[, AGE], as.character)
projetResponse[, "AGE"] <- sapply(projetResponse[, "AGE"], as.character)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
View(projetResponse)
projetResponse$AGE <- as.factor(projetResponse$AGE)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
projetResponse$AGE <- as.factor(projetResponse$AGE)
projetResponse$ADDRESS <- as.factor(projetResponse$ADDRESS)
projetResponse$ADDRESS <- as.factor(projetResponse$ADDRESS)
projetResponse$INCOME <- as.factor(projetResponse$INCOME)
projetResponse$CAR <- as.factor(projetResponse$CAR)
projetResponse$EMPLOY <- as.factor(projetResponse$EMPLOY)
projetResponse$RESIDE <- as.factor(projetResponse$RESIDE)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2))
, maxlen=20, maxtime=20)
rules2 <- apriori(projetResponse, parameter = list(supp = 0.15, conf = 0.5, target ="rules", minlen=2, maxlen=20, maxtime=20))
View(rules2)
df_rules2 <- DATAFRAME(rules2)
View(df_rules2)
df_rules2[df_rules2$RHS=="{RESPONSE=Oui}",]
df_rules2[df_rules2$RHS=="{RESPONSE=Non}",]
df_rules2[df_rules2$LHS=="{RESPONSE=Non}",]
View(rules2)
View(projetResponse)
df_rules2[df_rules2$RHS=="{RESPONSE=Non}",]
df_rules2 <- df_rules2[df_rules2$lift>1,]
df_rules2[df_rules2$RHS=="{RESPONSE=Non}",]
